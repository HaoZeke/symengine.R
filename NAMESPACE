# Generated by roxygen2: do not edit by hand

S3method(print,symengine.trigonometry)
export(Constant)
export(Integer)
export(RealDouble)
export(S)
export(Symbol)
export(Trigonometry)
export(api_basic_abs)
export(api_basic_acos)
export(api_basic_acosh)
export(api_basic_acot)
export(api_basic_acoth)
export(api_basic_acsc)
export(api_basic_acsch)
export(api_basic_add)
export(api_basic_asec)
export(api_basic_asech)
export(api_basic_asin)
export(api_basic_asinh)
export(api_basic_atan)
export(api_basic_atanh)
export(api_basic_cos)
export(api_basic_cosh)
export(api_basic_cot)
export(api_basic_coth)
export(api_basic_csc)
export(api_basic_csch)
export(api_basic_diff)
export(api_basic_dirichlet_eta)
export(api_basic_div)
export(api_basic_eq)
export(api_basic_erf)
export(api_basic_erfc)
export(api_basic_exp)
export(api_basic_expand)
export(api_basic_gamma)
export(api_basic_lambertw)
export(api_basic_log)
export(api_basic_mul)
export(api_basic_neg)
export(api_basic_neq)
export(api_basic_pow)
export(api_basic_sec)
export(api_basic_sech)
export(api_basic_sin)
export(api_basic_sinh)
export(api_basic_sqrt)
export(api_basic_str)
export(api_basic_str_julia)
export(api_basic_sub)
export(api_basic_tan)
export(api_basic_tanh)
export(api_basic_type)
export(api_basic_zeta)
export(api_builtin_const)
export(api_integer_from_int)
export(api_integer_from_str)
export(api_integer_get_int)
export(api_is_a_Complex)
export(api_is_a_ComplexDouble)
export(api_is_a_ComplexMPC)
export(api_is_a_Integer)
export(api_is_a_Number)
export(api_is_a_Rational)
export(api_is_a_RealDouble)
export(api_is_a_RealMPFR)
export(api_is_a_Symbol)
export(api_make_const)
export(api_new_symbol)
export(api_number_is_complex)
export(api_number_is_negative)
export(api_number_is_positive)
export(api_number_is_zero)
export(api_parse_str)
export(api_ptr_tag)
export(api_realdouble_from_d)
export(api_realdouble_get_d)
export(api_symengine_have_component)
export(api_symengine_logo)
export(api_symengine_version)
export(diff)
exportMethods(S)
import(methods)
useDynLib(symengine,c_ascii_art_str)
useDynLib(symengine,c_basic_abs)
useDynLib(symengine,c_basic_acos)
useDynLib(symengine,c_basic_acosh)
useDynLib(symengine,c_basic_acot)
useDynLib(symengine,c_basic_acoth)
useDynLib(symengine,c_basic_acsc)
useDynLib(symengine,c_basic_acsch)
useDynLib(symengine,c_basic_add)
useDynLib(symengine,c_basic_asec)
useDynLib(symengine,c_basic_asech)
useDynLib(symengine,c_basic_asin)
useDynLib(symengine,c_basic_asinh)
useDynLib(symengine,c_basic_atan)
useDynLib(symengine,c_basic_atanh)
useDynLib(symengine,c_basic_cos)
useDynLib(symengine,c_basic_cosh)
useDynLib(symengine,c_basic_cot)
useDynLib(symengine,c_basic_coth)
useDynLib(symengine,c_basic_csc)
useDynLib(symengine,c_basic_csch)
useDynLib(symengine,c_basic_diff)
useDynLib(symengine,c_basic_dirichlet_eta)
useDynLib(symengine,c_basic_div)
useDynLib(symengine,c_basic_eq)
useDynLib(symengine,c_basic_erf)
useDynLib(symengine,c_basic_erfc)
useDynLib(symengine,c_basic_exp)
useDynLib(symengine,c_basic_expand)
useDynLib(symengine,c_basic_gamma)
useDynLib(symengine,c_basic_lambertw)
useDynLib(symengine,c_basic_log)
useDynLib(symengine,c_basic_mul)
useDynLib(symengine,c_basic_neg)
useDynLib(symengine,c_basic_neq)
useDynLib(symengine,c_basic_pow)
useDynLib(symengine,c_basic_sec)
useDynLib(symengine,c_basic_sech)
useDynLib(symengine,c_basic_sin)
useDynLib(symengine,c_basic_sinh)
useDynLib(symengine,c_basic_sqrt)
useDynLib(symengine,c_basic_str)
useDynLib(symengine,c_basic_str_julia)
useDynLib(symengine,c_basic_sub)
useDynLib(symengine,c_basic_tan)
useDynLib(symengine,c_basic_tanh)
useDynLib(symengine,c_basic_type)
useDynLib(symengine,c_basic_zeta)
useDynLib(symengine,c_builtin_const)
useDynLib(symengine,c_integer_from_int)
useDynLib(symengine,c_integer_from_str)
useDynLib(symengine,c_integer_get_int)
useDynLib(symengine,c_is_a_Complex)
useDynLib(symengine,c_is_a_ComplexDouble)
useDynLib(symengine,c_is_a_ComplexMPC)
useDynLib(symengine,c_is_a_Integer)
useDynLib(symengine,c_is_a_Number)
useDynLib(symengine,c_is_a_Rational)
useDynLib(symengine,c_is_a_RealDouble)
useDynLib(symengine,c_is_a_RealMPFR)
useDynLib(symengine,c_is_a_Symbol)
useDynLib(symengine,c_make_const)
useDynLib(symengine,c_new_heap_symbol)
useDynLib(symengine,c_number_is_complex)
useDynLib(symengine,c_number_is_negative)
useDynLib(symengine,c_number_is_positive)
useDynLib(symengine,c_number_is_zero)
useDynLib(symengine,c_parse_str)
useDynLib(symengine,c_realdouble_from_d)
useDynLib(symengine,c_realdouble_get_d)
useDynLib(symengine,c_symengine_have_component)
useDynLib(symengine,c_symengine_version)
